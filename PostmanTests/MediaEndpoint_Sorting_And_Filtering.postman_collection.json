{
"info": {
"_postman_id": "media-sorting-filtering-tests",
"name": "Media Endpoint - Sorting & Filtering Tests (Token Auth)",
"description": "Comprehensive tests for media endpoint sorting and filtering functionality with token-based authentication",
"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
},
	"item": [
		{
			"name": "Setup - Create Test Data",
			"item": [
				{
					"name": "Register Test User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User UUID is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.uuid).to.be.a('string');",
									"    pm.collectionVariables.set(\"user1_id\", jsonData.user.uuid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomStreetAddress}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Action Movie (2023, FSK16, 4.5 stars)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Media UUID is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.be.a('string');",
									"    pm.collectionVariables.set(\"media1_id\", jsonData.uuid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Action Hero Adventures\",\n    \"description\": \"An action-packed thriller\",\n    \"mediaType\": \"Movie\",\n    \"releaseYear\": 2023,\n    \"ageRestriction\": \"FSK16\",\n    \"genre\": \"Action\",\n    \"createdBy\": \"{{user1_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/media",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comedy Series (2021, FSK12)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Media UUID is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"media2_id\", jsonData.uuid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Brilliant Comedy Show\",\n    \"description\": \"A hilarious comedy series\",\n    \"mediaType\": \"Series\",\n    \"releaseYear\": 2021,\n    \"ageRestriction\": \"FSK12\",\n    \"genre\": \"Comedy\",\n    \"createdBy\": \"{{user1_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/media",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Drama Movie (2020, FSK12)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Media UUID is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"media3_id\", jsonData.uuid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Deep Drama\",\n    \"description\": \"An emotional drama\",\n    \"mediaType\": \"Movie\",\n    \"releaseYear\": 2020,\n    \"ageRestriction\": \"FSK12\",\n    \"genre\": \"Drama\",\n    \"createdBy\": \"{{user1_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/media",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Action Game (2022, FSK18)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Media UUID is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"media4_id\", jsonData.uuid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Zombie Apocalypse Game\",\n    \"description\": \"Intense action game\",\n    \"mediaType\": \"Game\",\n    \"releaseYear\": 2022,\n    \"ageRestriction\": \"FSK18\",\n    \"genre\": \"Action\",\n    \"createdBy\": \"{{user1_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/media",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sorting Tests",
			"item": [
				{
					"name": "Sort by Title (Ascending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Results are sorted by title ascending\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            let title1 = jsonData[i].title.toLowerCase();",
									"            let title2 = jsonData[i + 1].title.toLowerCase();",
									"            pm.expect(title1.localeCompare(title2)).to.be.at.most(0);",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"All media entries have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('uuid');",
									"        pm.expect(item).to.have.property('title');",
									"        pm.expect(item).to.have.property('releaseYear');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=title&sortOrder=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "title"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by Title (Descending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Results are sorted by title descending\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            let title1 = jsonData[i].title.toLowerCase();",
									"            let title2 = jsonData[i + 1].title.toLowerCase();",
									"            pm.expect(title1.localeCompare(title2)).to.be.at.least(0);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=title&sortOrder=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "title"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by Year (Ascending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results are sorted by year ascending\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].releaseYear).to.be.at.most(jsonData[i + 1].releaseYear);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=year&sortOrder=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "year"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by Year (Descending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results are sorted by year descending\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].releaseYear).to.be.at.least(jsonData[i + 1].releaseYear);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=year&sortOrder=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "year"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by Score (Descending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results are sorted by score descending\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].averageScore).to.be.at.least(jsonData[i + 1].averageScore);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=score&sortOrder=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filter Tests",
			"item": [
				{
					"name": "Filter by Genre (Action)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All results have Action genre\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    jsonData.forEach(function(item) {",
									"        pm.expect(item.genre.toLowerCase()).to.include('action');",
									"    });",
									"});",
									"",
									"pm.test(\"At least one result is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?genre=Action",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "genre",
									"value": "Action"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Media Type (Movie)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results are Movies\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.mediaType).to.equal(0); // Movie enum value",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"At least one movie is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?mediaType=Movie",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "mediaType",
									"value": "Movie"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Media Type (Series)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results are Series\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.mediaType).to.equal(1); // Series enum value",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?mediaType=Series",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "mediaType",
									"value": "Series"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Release Year (2023)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results are from 2023\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.releaseYear).to.equal(2023);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?releaseYear=2023",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "releaseYear",
									"value": "2023"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Min Year (2021)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All results are from 2021 or later\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    jsonData.forEach(function(item) {",
									"        pm.expect(item.releaseYear).to.be.at.least(2021);",
									"    });",
									"});",
									"",
									"pm.test(\"At least one result is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?minYear=2021",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "minYear",
									"value": "2021"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Max Year (2021)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results are from 2021 or earlier\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.releaseYear).to.be.at.most(2021);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?maxYear=2021",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "maxYear",
									"value": "2021"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Age Restriction (FSK12)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All results have FSK12 rating\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    jsonData.forEach(function(item) {",
									"        pm.expect(item.ageRestriction).to.equal(2); // FSK12 enum value",
									"    });",
									"});",
									"",
									"pm.test(\"At least one result is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?ageRestriction=FSK12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "ageRestriction",
									"value": "FSK12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Title Contains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results contain 'Action' in title\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.title.toLowerCase()).to.include('action');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?titleContains=Action",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "titleContains",
									"value": "Action"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Combined Filter & Sort Tests",
			"item": [
				{
					"name": "Filter by Genre + Sort by Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results have Action genre\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.genre.toLowerCase()).to.include('action');",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Results are sorted by title ascending\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            let title1 = jsonData[i].title.toLowerCase();",
									"            let title2 = jsonData[i + 1].title.toLowerCase();",
									"            pm.expect(title1.localeCompare(title2)).to.be.at.most(0);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?genre=Action&sortBy=title&sortOrder=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "genre",
									"value": "Action"
								},
								{
									"key": "sortBy",
									"value": "title"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by MediaType + Sort by Year Desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results are Movies\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.mediaType).to.equal(0);",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Results are sorted by year descending\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].releaseYear).to.be.at.least(jsonData[i + 1].releaseYear);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?mediaType=Movie&sortBy=year&sortOrder=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "mediaType",
									"value": "Movie"
								},
								{
									"key": "sortBy",
									"value": "year"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by MinYear + AgeRestriction + Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results meet filter criteria\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.releaseYear).to.be.at.least(2020);",
									"            pm.expect(item.ageRestriction).to.equal(2); // FSK12",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Results are sorted by title\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            let title1 = jsonData[i].title.toLowerCase();",
									"            let title2 = jsonData[i + 1].title.toLowerCase();",
									"            pm.expect(title1.localeCompare(title2)).to.be.at.most(0);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?minYear=2020&ageRestriction=FSK12&sortBy=title",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "minYear",
									"value": "2020"
								},
								{
									"key": "ageRestriction",
									"value": "FSK12"
								},
								{
									"key": "sortBy",
									"value": "title"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Creator + Sort by Year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Results are sorted by year ascending\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].releaseYear).to.be.at.most(jsonData[i + 1].releaseYear);",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"All results belong to the same creator\", function () {",
									"    var jsonData = pm.response.json();",
									"    var creatorId = pm.collectionVariables.get(\"user1_id\");",
									"    ",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.createdBy).to.be.an('object');",
									"            pm.expect(item.createdBy.uuid).to.equal(creatorId);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?creator={{user1_id}}&sortBy=year&sortOrder=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "creator",
									"value": "{{user1_id}}"
								},
								{
									"key": "sortBy",
									"value": "year"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Multiple Combined Filters",
			"item": [
				{
					"name": "Genre + MediaType + MinYear Combined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results match ALL filter criteria\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.genre.toLowerCase()).to.include('action');",
									"            pm.expect(item.mediaType).to.equal(0); // Movie",
									"            pm.expect(item.releaseYear).to.be.at.least(2020);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?genre=Action&mediaType=Movie&minYear=2020",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "genre",
									"value": "Action"
								},
								{
									"key": "mediaType",
									"value": "Movie"
								},
								{
									"key": "minYear",
									"value": "2020"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Year Range + AgeRestriction + Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results match year range and age restriction\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.releaseYear).to.be.at.least(2020);",
									"            pm.expect(item.releaseYear).to.be.at.most(2023);",
									"            pm.expect(item.ageRestriction).to.equal(2); // FSK12",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Results are sorted by title\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            let title1 = jsonData[i].title.toLowerCase();",
									"            let title2 = jsonData[i + 1].title.toLowerCase();",
									"            pm.expect(title1.localeCompare(title2)).to.be.at.most(0);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?minYear=2020&maxYear=2023&ageRestriction=FSK12&sortBy=title",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "minYear",
									"value": "2020"
								},
								{
									"key": "maxYear",
									"value": "2023"
								},
								{
									"key": "ageRestriction",
									"value": "FSK12"
								},
								{
									"key": "sortBy",
									"value": "title"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Creator + Genre + MediaType Combined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All results match creator, genre and media type\", function () {",
									"    var jsonData = pm.response.json();",
									"    var creatorId = pm.collectionVariables.get(\"user1_id\");",
									"    ",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item.createdBy).to.be.an('object');",
									"            pm.expect(item.createdBy.uuid).to.equal(creatorId);",
									"            pm.expect(item.genre.toLowerCase()).to.include('action');",
									"            pm.expect(item.mediaType).to.equal(0); // Movie",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?creator={{user1_id}}&genre=Action&mediaType=Movie",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "creator",
									"value": "{{user1_id}}"
								},
								{
									"key": "genre",
									"value": "Action"
								},
								{
									"key": "mediaType",
									"value": "Movie"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TitleContains + Year + AgeRestriction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Results match all combined filters\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            // Title contains check (case-insensitive)",
									"            pm.expect(item.title.toLowerCase()).to.satisfy(function(title) {",
									"                return title.includes('action') || title.includes('comedy') || title.includes('drama') || title.includes('zombie');",
									"            });",
									"            pm.expect(item.releaseYear).to.be.at.least(2020);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?titleContains=o&minYear=2020",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "titleContains",
									"value": "o"
								},
								{
									"key": "minYear",
									"value": "2020"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Edge Cases & Validation",
			"item": [
				{
					"name": "Invalid Sort Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results are returned without sorting\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=invalidField",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "invalidField"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Case Insensitive Sort Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Results are sorted correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            let title1 = jsonData[i].title.toLowerCase();",
									"            let title2 = jsonData[i + 1].title.toLowerCase();",
									"            pm.expect(title1.localeCompare(title2)).to.be.at.most(0);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=TITLE&sortOrder=ASC",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "TITLE"
								},
								{
									"key": "sortOrder",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter with No Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Empty or no matching results returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    // Either empty or results don't match the filter",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?genre=NonExistentGenre",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "genre",
									"value": "NonExistentGenre"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort Alias - releaseYear",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results are sorted by year\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].releaseYear).to.be.at.most(jsonData[i + 1].releaseYear);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=releaseYear",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "releaseYear"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort Alias - averageScore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results are sorted by score\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].averageScore).to.be.at.least(jsonData[i + 1].averageScore);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/media?sortBy=averageScore&sortOrder=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"media"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "averageScore"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "user1_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "media1_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "media2_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "media3_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "media4_id",
			"value": "",
			"type": "string"
		}
	]
}
